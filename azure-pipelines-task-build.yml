parameters:
  workingDirectory:

steps:
- script: |
    # Display command output and fail immediately on any errors
    set -e -x

    # Set the package version
    sed -i 's/{{PACKAGE_VERSION}}/$(GitVersion.MajorMinorPatch)/g' package.json

    # Set the task version
    sed -i 's/{{MAJOR_VERSION}}/$(GitVersion.Major)/g' task.json
    sed -i 's/{{MINOR_VERSION}}/$(GitVersion.Minor)/g' task.json
    sed -i 's/{{PATCH_VERSION}}/$(GitVersion.Patch)/g' task.json
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Set package and task Versions

- script: |
    # Install NPM Packages
    npm install --dev
    
    # Build typescript
    tsc --build

    # Run tests
   
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Build and test the task

- script: |
    # Remove all dev dependencies prior to release
    npm prune --production    
    
    # Ensure the destination path exists
    mkdir -p $(Build.StagingDirectory)/Tasks/

    # Copy all task files to the staging output path
    rsync -avr \
      --include=./node_modules \
      --include=./package.json \
      --include=./package-lock.json \
      --include=./task.json \
      --exclude=* \
      . $(Build.StagingDirectory)/Tasks/  
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Package the task for release
