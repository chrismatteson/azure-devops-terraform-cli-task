parameters:
  workingDirectory:

steps:
- script: |
    # Display command output and fail immediately on any errors
    set -e -x

    # Set the package version
    sed -i -E 's/"version":\s"[0-9/.]+"/"version": "$(GitVersion.MajorMinorPatch)"/g' package.json

    # Set the task version
    sed -i -E 's/"Major":\s"[0-9/.]+"/"Major": "$(GitVersion.Major)"/g' package.json
    sed -i -E 's/"Minor":\s"[0-9/.]+"/"Minor": "$(GitVersion.Minor)"/g' package.json
    sed -i -E 's/"Patch":\s"[0-9/.]+"/"Patch": "$(GitVersion.Patch)"/g' package.json

  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Set package and task Versions

- script: |
    # Install NPM Packages
    npm install --dev
    
    # Build typescript
    tsc --build --clean

    # Run tests
   
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Build and test the task

- script: |
    # Remove all dev dependencies prior to release
    npm prune --production    
    
    # Ensure the destination path exists
    mkdir -p $(Build.StagingDirectory)/Tasks/

    # Get the task name from the working directory
    taskname=`basename "$PWD"`

    # Copy all task files to the staging output path
    rsync -avr \
      --include=node_modules/ \
      --include=package.json \
      --include=package-lock.json \
      --include=task.json \
      --exclude=* \
      ./ $(Build.StagingDirectory)/Tasks/$taskname  
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: Package the task for release
